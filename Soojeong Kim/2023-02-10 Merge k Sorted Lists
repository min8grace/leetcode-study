import java.util.*;
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        
        Queue<ListNode> heap = new PriorityQueue<>((l1, l2) -> l1.val- l2.val);
        ListNode head = new ListNode(0), tail = head;
        for(ListNode node : lists) {
            //Only the head of each list is added
            if(node != null) heap.offer(node);
        }
        while(!heap.isEmpty()) {
            tail.next= heap.poll();
            tail = tail.next;
            //head.next has to be added in the heap again.
            if(tail.next != null) heap.offer(tail.next);    
        }
        return head.next;
    }
}